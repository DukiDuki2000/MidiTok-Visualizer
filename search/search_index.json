{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dokumentacja analityczna Miditok","title":"Home"},{"location":"#dokumentacja-analityczna-miditok","text":"","title":"Dokumentacja analityczna Miditok"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/","text":"Projekt WIMU 2023Z - Dokumentacja ko\u0144cowa Sk\u0142ad zespo\u0142u: \u0141ukasz Pokorzy\u0144ski (300251) Olga Sapiechowska (302687) Micha\u0142 Wiszenko (300285) Temat projektu Narz\u0119dzie pozwalaj\u0105ce na wizualizacj\u0119 tokenizacji plik\u00f3w MIDI przez bibliotek\u0119 MidiTok Opis funkcjonalno\u015bci programu Stworzone narz\u0119dzie b\u0119dzie aplikacj\u0105 internetow\u0105, kt\u00f3ra pozwoli na przegl\u0105d token\u00f3w wygenerowanych poprzez bibliotek\u0119 MidiTok[^fn2] na podstawie pliku formatu MIDI oraz wizalizacj\u0119 metryk, kt\u00f3re mog\u0105 by\u0107 wyczytane z tego formatu w celu dok\u0142adnej analizy pliku i danych si\u0119 w nim znajduj\u0105cych. W\u015br\u00f3d tych metryk mo\u017cemy znale\u017a\u0107 bardzo podstawowe takie jak klucz, metrum, tempo[^fn4], a tak\u017ce bardziej zaawansowane zwi\u0105zane z tonami oraz rytmik\u0105 utworu[^fn5]. Decyzja, jakie dok\u0142adnie metryki zostan\u0105 zaimplementowane, zostanie podj\u0119ta na dalszym etapie rozwoju projektu. Planowane funkcjonalno\u015bci: wgranie pliku MIDI z urz\u0105dzenia; wizualizacja tokenizacji pliku MIDI poprzez bibliotek\u0119 MidiTok; mo\u017cliwo\u015b\u0107 zmiany parametr\u00f3w oraz sposobu tokenizacji poprzez bibliotek\u0119 MidiTok; wizualizacja metryk symbolicznych na podstawie pliku MIDI. W razie wystarczaj\u0105cych zasob\u00f3w czasowych, chcieliby\u015bmy zrealizowa\u0107 r\u00f3wnie\u017c nast\u0119puj\u0105ce funkcjonalno\u015bci: stworzenie pliku MIDI \"na \u017cywo\"[^fn3]. Nie gwarantujemy jednak, \u017ce zostan\u0105 one zaimplementowane i traktujemy je jako funkcjonalno\u015bci w pe\u0142ni opcjonalne. Przewidywany stack technologiczny Frontend : TypeScript, React Backend : Python, FastAPI/Flask Tokenizacja plik\u00f3w MIDI : MidiTok Hosting aplikacji : Heroku System kontroli wersji : Git Hosting repozytorium : GitLab Testy : pytest, jest Harmonogram prac 30.10 - 5.11: Przygotowanie repozytorium, zapoznanie si\u0119 z formatem MIDI, dokumentacj\u0105 narz\u0119dzi (np. MidiTok); Stworzenie podstawowego programu w Pythonie z MidiTok 6.11 - 12.11: Rozw\u00f3j programu: wgrywanie pliku MIDI, przetwarzanie pliku, mo\u017cliwo\u015b\u0107 doboru typu tokenizacji 13.11 - 19.11: Poprawki do programu; Stworzenie minimalnego frontendu, wy\u015bwietlanie rezultat\u00f3w w prostym formacie; podstawowa komunikacja z backendem 20.11 - 26.11: Poprawki frontendu; Przekazanie funkcjonalnego prototypu; Rozpocz\u0119cie dalszego rozwoju 27.11 - 10.12: Implementacja wybranych metryk symbolicznych, finalizacja komunikacji mi\u0119dzy frontendem i backendem 11.12 - 24.12: Praca nad interfejsem graficznym aplikacji, wizualizacja zaimplementowanych metryk symbolicznych 25.12 - 31.12: Przerwa \u015bwi\u0105teczna - brak przewidzianych prac 1.01 - 7.01: Ostateczny rozw\u00f3j interfejsu graficznego; Wprowadzanie poprawek 8.01 - 14.01: Oddanie projektu, mo\u017cliwe poprawki w razie uwag 15.01 - 28.01: Bufor czasowy; (Ewentualne) Prace nad artyku\u0142em Kolejne kroki s\u0105 zaplanowane sztywno wed\u0142ug tygodni, ale dopuszczamy mo\u017cliwo\u015b\u0107 szybszego rozpoczynania kolejnych etap\u00f3w, jak i mo\u017cliwo\u015b\u0107 przed\u0142u\u017cania zada\u0144 na kolejny tydzie\u0144, czego postaramy si\u0119 unika\u0107. Zmiany wzgl\u0119dem dokumentacji wst\u0119pnej projektu Niezmieniony stack technologiczny. Doprecyzowanie: - backend z FastAPI, - metryki z MusPy. Napotkane problemy Tokenizery z MIDItok daj\u0105 wyj\u015bcie w czterech r\u00f3\u017cnych formatach, przez co ich wy\u015bwietlanie r\u00f3\u017cni si\u0119 od podstawowego, zamierzonego efektu. Wizualizacja ka\u017cdego typu wyj\u015bcia musia\u0142a zosta\u0107 odpowiednio przemy\u015blana. Niezrealizowane mo\u017cliwo\u015bci rozbudowy stworzenie pliku MIDI \"na \u017cywo\" (jedyn\u0105 dost\u0119pn\u0105 w tej chwili opcj\u0105 jest dodanie pliku z urz\u0105dzenia); rozszerzenie funkcjonalno\u015bci aplikacji na wszystkie tokenizery z MIDItok; stworzenie kontekstu u\u017cytkownika. Stopie\u0144 wywi\u0105zania si\u0119 z harmonogramu Do grudnia prace post\u0119powa\u0142y zgodnie z harmonogramem. Ostatecznie implementacja metryk przesun\u0119\u0142a si\u0119 na stycze\u0144, a finalizacja frontendu zosta\u0142a przesuni\u0119ta o tydzie\u0144. Oddanie r\u00f3wnie\u017c nast\u0105pi\u0142o p\u00f3\u017aniej ni\u017c planowano, lecz z niewielkim op\u00f3\u017anieniem. Specyfikacja techniczna Struktura aplikacji Aplikacja zosta\u0142a zaprojektowana zgodnie z wzorcem architektonicznym architektury wielowarstwowej. Wyst\u0119puje twardy rozdzia\u0142 na cz\u0119\u015b\u0107 frontendow\u0105 oraz backendow\u0105. |-- docker-compose.yaml |-- README.md |-- backend |-- poetry.lock |-- pyproject.toml |-- Dockerfile |-- core |-- main.py |-- constants.py |-- api |-- ... |-- data |-- ... |-- service |-- ... |-- tests |-- ... |-- frontend |-- package.json |-- package-lock.json |-- tsconfig.json |-- Dockerfile |-- src |-- index.tsx |-- App.tsx |-- components |-- ... |-- interfaces |-- ... |-- public |-- ... |-- node_modules |-- ... Proces developerski W celu zachowania zasad clean code, przed wrzuceniem commita na brancha, zaleca si\u0119 wykonanie pre-commita. Aby uruchomi\u0107 pre-commit, nale\u017cy u\u017cy\u0107 komendy: cd backend pre-commit run --all-files W sk\u0142ad skryptu pre-commit wchodz\u0105: black (formatowanie) ruff (linting) isort (sortowanie import\u00f3w) mypy (weryfikacja typowania) Budowanie i uruchamianie aplikacji Aplikacja frontendowa Podstawowe uruchamianie aplikacji: cd frontend npm install npm run dev Uruchamianie aplikacji przy pomocy Dockera: cd frontend docker build . -t frontend docker run frontend -p 3000:3000 Aplikacja backendowa Podstawowe uruchamianie aplikacji: cd backend poetry shell poetry install python -m core.main lub poetry run python -m core.main Uruchamianie aplikacji przy pomocy Dockera: cd backend DOCKER_BUILDKIT=1 docker build --target=runtime . -t backend docker run backend -p 8000:8000 Docker Compose Mo\u017cliwe jest r\u00f3wnie\u017c uruchomienie ca\u0142ego projektu przy u\u017cyciu Docker Compose: docker-compose up --build Testowanie aplikacji Aplikacja frontendowa Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu jest : cd frontend npm install npm run test Aplikacja backendowa Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu pytest : poetry shell poetry install pytest lub: poetry run pytest Logi Zaimplementowano middleware na bazie starlette , kt\u00f3ry przy u\u017cyciu modu\u0142u logging tworzy logi dla ka\u017cdego zapytania do serwera. Pojedynczy wpis w logach zawiera podstawowe dane dla pojedynczego zapytania oraz odpowiedzi serwera, jak r\u00f3wnie\u017c czas przetwarzania zapytania. Domy\u015blnie logi zapisywane s\u0105 do pliku logfile.log . Deployment Obie aplikacje s\u0105 hostowane na Heroku. Aplikacja frontendowa jest dost\u0119pna pod adresem: https://wimu-frontend-ccb0bbc023d3.herokuapp.com Repozytorium System kontroli wersji: Git Hosting repozytorium: GitLab Link do repozytorium: https://gitlab-stud.elka.pw.edu.pl/lpokorzy/wimu-miditokvisualizer Bibliografia [^fn2]: https://miditok.readthedocs.io/en/v2.1.7/ [Dost\u0119p zdalny 26.10.2023] [^fn3]: https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API [Dost\u0119p zdalny 26.10.2023] [^fn4]: https://craffel.github.io/pretty-midi/ [Dost\u0119p zdalny 26.10.2023] [^fn5]: https://salu133445.github.io/muspy/metrics.html [Dost\u0119p zdalny 26.10.2023]","title":"Projekt WIMU 2023Z - Dokumentacja ko\u0144cowa"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#projekt-wimu-2023z-dokumentacja-koncowa","text":"Sk\u0142ad zespo\u0142u: \u0141ukasz Pokorzy\u0144ski (300251) Olga Sapiechowska (302687) Micha\u0142 Wiszenko (300285)","title":"Projekt WIMU 2023Z - Dokumentacja ko\u0144cowa"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#temat-projektu","text":"Narz\u0119dzie pozwalaj\u0105ce na wizualizacj\u0119 tokenizacji plik\u00f3w MIDI przez bibliotek\u0119 MidiTok","title":"Temat projektu"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#opis-funkcjonalnosci-programu","text":"Stworzone narz\u0119dzie b\u0119dzie aplikacj\u0105 internetow\u0105, kt\u00f3ra pozwoli na przegl\u0105d token\u00f3w wygenerowanych poprzez bibliotek\u0119 MidiTok[^fn2] na podstawie pliku formatu MIDI oraz wizalizacj\u0119 metryk, kt\u00f3re mog\u0105 by\u0107 wyczytane z tego formatu w celu dok\u0142adnej analizy pliku i danych si\u0119 w nim znajduj\u0105cych. W\u015br\u00f3d tych metryk mo\u017cemy znale\u017a\u0107 bardzo podstawowe takie jak klucz, metrum, tempo[^fn4], a tak\u017ce bardziej zaawansowane zwi\u0105zane z tonami oraz rytmik\u0105 utworu[^fn5]. Decyzja, jakie dok\u0142adnie metryki zostan\u0105 zaimplementowane, zostanie podj\u0119ta na dalszym etapie rozwoju projektu. Planowane funkcjonalno\u015bci: wgranie pliku MIDI z urz\u0105dzenia; wizualizacja tokenizacji pliku MIDI poprzez bibliotek\u0119 MidiTok; mo\u017cliwo\u015b\u0107 zmiany parametr\u00f3w oraz sposobu tokenizacji poprzez bibliotek\u0119 MidiTok; wizualizacja metryk symbolicznych na podstawie pliku MIDI. W razie wystarczaj\u0105cych zasob\u00f3w czasowych, chcieliby\u015bmy zrealizowa\u0107 r\u00f3wnie\u017c nast\u0119puj\u0105ce funkcjonalno\u015bci: stworzenie pliku MIDI \"na \u017cywo\"[^fn3]. Nie gwarantujemy jednak, \u017ce zostan\u0105 one zaimplementowane i traktujemy je jako funkcjonalno\u015bci w pe\u0142ni opcjonalne.","title":"Opis funkcjonalno\u015bci programu"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#przewidywany-stack-technologiczny","text":"Frontend : TypeScript, React Backend : Python, FastAPI/Flask Tokenizacja plik\u00f3w MIDI : MidiTok Hosting aplikacji : Heroku System kontroli wersji : Git Hosting repozytorium : GitLab Testy : pytest, jest","title":"Przewidywany stack technologiczny"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#harmonogram-prac","text":"30.10 - 5.11: Przygotowanie repozytorium, zapoznanie si\u0119 z formatem MIDI, dokumentacj\u0105 narz\u0119dzi (np. MidiTok); Stworzenie podstawowego programu w Pythonie z MidiTok 6.11 - 12.11: Rozw\u00f3j programu: wgrywanie pliku MIDI, przetwarzanie pliku, mo\u017cliwo\u015b\u0107 doboru typu tokenizacji 13.11 - 19.11: Poprawki do programu; Stworzenie minimalnego frontendu, wy\u015bwietlanie rezultat\u00f3w w prostym formacie; podstawowa komunikacja z backendem 20.11 - 26.11: Poprawki frontendu; Przekazanie funkcjonalnego prototypu; Rozpocz\u0119cie dalszego rozwoju 27.11 - 10.12: Implementacja wybranych metryk symbolicznych, finalizacja komunikacji mi\u0119dzy frontendem i backendem 11.12 - 24.12: Praca nad interfejsem graficznym aplikacji, wizualizacja zaimplementowanych metryk symbolicznych 25.12 - 31.12: Przerwa \u015bwi\u0105teczna - brak przewidzianych prac 1.01 - 7.01: Ostateczny rozw\u00f3j interfejsu graficznego; Wprowadzanie poprawek 8.01 - 14.01: Oddanie projektu, mo\u017cliwe poprawki w razie uwag 15.01 - 28.01: Bufor czasowy; (Ewentualne) Prace nad artyku\u0142em Kolejne kroki s\u0105 zaplanowane sztywno wed\u0142ug tygodni, ale dopuszczamy mo\u017cliwo\u015b\u0107 szybszego rozpoczynania kolejnych etap\u00f3w, jak i mo\u017cliwo\u015b\u0107 przed\u0142u\u017cania zada\u0144 na kolejny tydzie\u0144, czego postaramy si\u0119 unika\u0107.","title":"Harmonogram prac"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#zmiany-wzgledem-dokumentacji-wstepnej-projektu","text":"Niezmieniony stack technologiczny. Doprecyzowanie: - backend z FastAPI, - metryki z MusPy.","title":"Zmiany wzgl\u0119dem dokumentacji wst\u0119pnej projektu"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#napotkane-problemy","text":"Tokenizery z MIDItok daj\u0105 wyj\u015bcie w czterech r\u00f3\u017cnych formatach, przez co ich wy\u015bwietlanie r\u00f3\u017cni si\u0119 od podstawowego, zamierzonego efektu. Wizualizacja ka\u017cdego typu wyj\u015bcia musia\u0142a zosta\u0107 odpowiednio przemy\u015blana.","title":"Napotkane problemy"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#niezrealizowane-mozliwosci-rozbudowy","text":"stworzenie pliku MIDI \"na \u017cywo\" (jedyn\u0105 dost\u0119pn\u0105 w tej chwili opcj\u0105 jest dodanie pliku z urz\u0105dzenia); rozszerzenie funkcjonalno\u015bci aplikacji na wszystkie tokenizery z MIDItok; stworzenie kontekstu u\u017cytkownika.","title":"Niezrealizowane mo\u017cliwo\u015bci rozbudowy"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#stopien-wywiazania-sie-z-harmonogramu","text":"Do grudnia prace post\u0119powa\u0142y zgodnie z harmonogramem. Ostatecznie implementacja metryk przesun\u0119\u0142a si\u0119 na stycze\u0144, a finalizacja frontendu zosta\u0142a przesuni\u0119ta o tydzie\u0144. Oddanie r\u00f3wnie\u017c nast\u0105pi\u0142o p\u00f3\u017aniej ni\u017c planowano, lecz z niewielkim op\u00f3\u017anieniem.","title":"Stopie\u0144 wywi\u0105zania si\u0119 z harmonogramu"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#specyfikacja-techniczna","text":"","title":"Specyfikacja techniczna"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#struktura-aplikacji","text":"Aplikacja zosta\u0142a zaprojektowana zgodnie z wzorcem architektonicznym architektury wielowarstwowej. Wyst\u0119puje twardy rozdzia\u0142 na cz\u0119\u015b\u0107 frontendow\u0105 oraz backendow\u0105. |-- docker-compose.yaml |-- README.md |-- backend |-- poetry.lock |-- pyproject.toml |-- Dockerfile |-- core |-- main.py |-- constants.py |-- api |-- ... |-- data |-- ... |-- service |-- ... |-- tests |-- ... |-- frontend |-- package.json |-- package-lock.json |-- tsconfig.json |-- Dockerfile |-- src |-- index.tsx |-- App.tsx |-- components |-- ... |-- interfaces |-- ... |-- public |-- ... |-- node_modules |-- ...","title":"Struktura aplikacji"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#proces-developerski","text":"W celu zachowania zasad clean code, przed wrzuceniem commita na brancha, zaleca si\u0119 wykonanie pre-commita. Aby uruchomi\u0107 pre-commit, nale\u017cy u\u017cy\u0107 komendy: cd backend pre-commit run --all-files W sk\u0142ad skryptu pre-commit wchodz\u0105: black (formatowanie) ruff (linting) isort (sortowanie import\u00f3w) mypy (weryfikacja typowania)","title":"Proces developerski"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#budowanie-i-uruchamianie-aplikacji","text":"","title":"Budowanie i uruchamianie aplikacji"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#aplikacja-frontendowa","text":"Podstawowe uruchamianie aplikacji: cd frontend npm install npm run dev Uruchamianie aplikacji przy pomocy Dockera: cd frontend docker build . -t frontend docker run frontend -p 3000:3000","title":"Aplikacja frontendowa"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#aplikacja-backendowa","text":"Podstawowe uruchamianie aplikacji: cd backend poetry shell poetry install python -m core.main lub poetry run python -m core.main Uruchamianie aplikacji przy pomocy Dockera: cd backend DOCKER_BUILDKIT=1 docker build --target=runtime . -t backend docker run backend -p 8000:8000","title":"Aplikacja backendowa"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#docker-compose","text":"Mo\u017cliwe jest r\u00f3wnie\u017c uruchomienie ca\u0142ego projektu przy u\u017cyciu Docker Compose: docker-compose up --build","title":"Docker Compose"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#testowanie-aplikacji","text":"","title":"Testowanie aplikacji"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#aplikacja-frontendowa_1","text":"Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu jest : cd frontend npm install npm run test","title":"Aplikacja frontendowa"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#aplikacja-backendowa_1","text":"Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu pytest : poetry shell poetry install pytest lub: poetry run pytest","title":"Aplikacja backendowa"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#logi","text":"Zaimplementowano middleware na bazie starlette , kt\u00f3ry przy u\u017cyciu modu\u0142u logging tworzy logi dla ka\u017cdego zapytania do serwera. Pojedynczy wpis w logach zawiera podstawowe dane dla pojedynczego zapytania oraz odpowiedzi serwera, jak r\u00f3wnie\u017c czas przetwarzania zapytania. Domy\u015blnie logi zapisywane s\u0105 do pliku logfile.log .","title":"Logi"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#deployment","text":"Obie aplikacje s\u0105 hostowane na Heroku. Aplikacja frontendowa jest dost\u0119pna pod adresem: https://wimu-frontend-ccb0bbc023d3.herokuapp.com","title":"Deployment"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#repozytorium","text":"System kontroli wersji: Git Hosting repozytorium: GitLab Link do repozytorium: https://gitlab-stud.elka.pw.edu.pl/lpokorzy/wimu-miditokvisualizer","title":"Repozytorium"},{"location":"%20Design%20documentation/23Z/WIMU-GR3-Dokumentacja/#bibliografia","text":"[^fn2]: https://miditok.readthedocs.io/en/v2.1.7/ [Dost\u0119p zdalny 26.10.2023] [^fn3]: https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API [Dost\u0119p zdalny 26.10.2023] [^fn4]: https://craffel.github.io/pretty-midi/ [Dost\u0119p zdalny 26.10.2023] [^fn5]: https://salu133445.github.io/muspy/metrics.html [Dost\u0119p zdalny 26.10.2023]","title":"Bibliografia"},{"location":"%20Design%20documentation/24L/notes_pl/","text":"WIMU-MidiTokVisualizer MidiTok Visualizer to aplikacja webowa pozwalaj\u0105ca na wizualizacj\u0119 tokenizacji plik\u00f3w MIDI przez bibliotek\u0119 MidiTok. Funkcjonalno\u015b\u0107 dodana w wersji 2023Z: - wgrywanie pliku MIDI z urz\u0105dzenia, - wybranie tokenizera i jego parametr\u00f3w, - przegl\u0105d wyodr\u0119bnionych token\u00f3w w formacie przyjaznym dla u\u017cytkownika, - przegl\u0105d metryk symbolicznych (takich jak klucz, metrum, tempo) na podstawie MIDI Funkcjonalno\u015b\u0107 dodana w wersji 2024L: - zmiana metody prezentacji token\u00f3w na spos\u00f3b bardziej czytelny (wy\u015bwietlanie w rz\u0119dach), - mo\u017cliwo\u015b\u0107 wgrywania wielu plik\u00f3w i prze\u0142\u0105czania si\u0119 pomi\u0119dzy nimi, - wy\u015bwietlanie piano roll'a z wgranym plikiem MIDI (osobne track'i/programy w osobnych zak\u0142adkach), - mo\u017cliwo\u015b\u0107 odtworzenia wgranego pliku MIDI, - mo\u017cliwo\u015b\u0107 zaznaczania i pod\u015bwietlania token\u00f3w oraz odpowiadaj\u0105cych im d\u017awi\u0119k\u00f3w na piano roll'u - wy\u015bwietlanie szczeg\u00f3\u0142owych informacji o tokenie w osobnej, powi\u0119kszonej ramce Potencjalna funkcjonalno\u015b\u0107 do dodania w przysz\u0142ych wersjach: - poprawa wydajno\u015bci dzia\u0142ania aplikacji przy wgrywanych bardzo du\u017cych plikach MIDI, - dodanie implementacji reszty tokenizer\u00f3w (MMM, MuMIDI, REMIPlus), - poprawa og\u00f3lnej oprawy graficznej aplikacji, - dodanie \u015bledzenia obecnie odtwarzanej pozycji na piano roll'u Proces developerski W celu zachowania zasad clean code, przed wrzuceniem commita na brancha, zaleca si\u0119 wykonanie pre-commita. Aby uruchomi\u0107 pre-commit, nale\u017cy u\u017cy\u0107 komendy: cd backend pre-commit run --all-files W sk\u0142ad skryptu pre-commit wchodz\u0105: black (formatowanie) ruff (linting) isort (sortowanie import\u00f3w) mypy (weryfikacja typowania) Budowanie i uruchamianie aplikacji Aplikacja frontendowa Podstawowe uruchamianie aplikacji: cd frontend npm install npm run dev Uruchamianie aplikacji przy pomocy Dockera: cd frontend docker build . -t frontend docker run frontend -p 3000:3000 Aplikacja backendowa Podstawowe uruchamianie aplikacji: cd backend poetry shell poetry install python -m core.main lub poetry run python -m core.main Uruchamianie aplikacji przy pomocy Dockera: cd backend DOCKER_BUILDKIT=1 docker build --target=runtime . -t backend docker run backend -p 8000:8000 Docker Compose Mo\u017cliwe jest r\u00f3wnie\u017c uruchomienie ca\u0142ego projektu przy u\u017cyciu Docker Compose: docker-compose up --build Testowanie aplikacji Aplikacja frontendowa Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu jest : cd frontend npm install npm run test Aplikacja backendowa Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu pytest : poetry shell poetry install pytest lub: poetry run pytest Logi Zaimplementowano middleware na bazie starlette , kt\u00f3ry przy u\u017cyciu modu\u0142u logging tworzy logi dla ka\u017cdego zapytania do serwera. Pojedynczy wpis w logach zawiera podstawowe dane dla pojedynczego zapytania oraz odpowiedzi serwera, jak r\u00f3wnie\u017c czas przetwarzania zapytania. Domy\u015blnie logi zapisywane s\u0105 do pliku logfile.log . Deployment Obie aplikacje s\u0105 hostowane na Heroku. Aplikacja frontendowa jest dost\u0119pna pod adresem: https://wimu-frontend-ccb0bbc023d3.herokuapp.com Oryginalni autorzy (2023Z) \u0141ukasz Pokorzy\u0144ski Olga Sapiechowska Micha\u0142 Wiszenko Autorzy rozwijaj\u0105cy projekt (2024L) Kacper Stefa\u0144ski Konstantin Panov Piotr Malesa Planowany harmonogram prac projektu Tydzie\u0144 1 (19.02 - 23.02): - Tydzie\u0144 2 (26.02 - 01.03): - Tydzie\u0144 3 (04.03 - 08.03): - Tydzie\u0144 4 (11.03 - 15.03) : - Tydzie\u0144 5 (18.03 - 22.03) : Dostarczenie poprawionego design proposal'a ze zmodyfikowanym planem rozszerzenia aplikacji Tydzie\u0144 6 (25.03 - 29.03) : Przygotowanie \u015brodowiska do pracy nad projektem oraz rozpocz\u0119cie rozwoju nowych funkcjonalno\u015bci Tydzie\u0144 7 (01.04 - 05.04) : Przerwa \u015bwi\u0105teczna Tydzie\u0144 8 (08.04 - 12.04) : Dalsze prace nad UI oraz prezentacja prototypu Tydzie\u0144 9 (15.04 - 19.04) : Dalsze prace nad UI Tydzie\u0144 10 (22.04 -26.04) : Uko\u0144czona cz\u0119\u015b\u0107 rozszerzenia UI Tydzie\u0144 11 (29.04 - 03.05) : Maj\u00f3wka Tydzie\u0144 12 (06.05 - 10.05) : Praca nad implementacj\u0105 kolejnych tokenizer\u00f3w (MMM, MuMIDI) i ewentualne poprawki UI Tydzie\u0144 13 (13.05 - 17.05) : Dostarczenie i zademonstrowanie funkcjonalnego prototypu Tydzie\u0144 14 (20.05 - 24.05) : Uko\u0144czenie rozszerzenia API o nowe tokenizery Tydzie\u0144 15 (27.05 - 31.05) : Praca nad poprawkami po pierwszej prezentacji projektu Tydzie\u0144 16 (03.06 - 07.06) : Oddanie projektu (szacowany termin) Tydzie\u0144 17 (10.06 - 14.06): -","title":"WIMU-MidiTokVisualizer"},{"location":"%20Design%20documentation/24L/notes_pl/#wimu-miditokvisualizer","text":"MidiTok Visualizer to aplikacja webowa pozwalaj\u0105ca na wizualizacj\u0119 tokenizacji plik\u00f3w MIDI przez bibliotek\u0119 MidiTok. Funkcjonalno\u015b\u0107 dodana w wersji 2023Z: - wgrywanie pliku MIDI z urz\u0105dzenia, - wybranie tokenizera i jego parametr\u00f3w, - przegl\u0105d wyodr\u0119bnionych token\u00f3w w formacie przyjaznym dla u\u017cytkownika, - przegl\u0105d metryk symbolicznych (takich jak klucz, metrum, tempo) na podstawie MIDI Funkcjonalno\u015b\u0107 dodana w wersji 2024L: - zmiana metody prezentacji token\u00f3w na spos\u00f3b bardziej czytelny (wy\u015bwietlanie w rz\u0119dach), - mo\u017cliwo\u015b\u0107 wgrywania wielu plik\u00f3w i prze\u0142\u0105czania si\u0119 pomi\u0119dzy nimi, - wy\u015bwietlanie piano roll'a z wgranym plikiem MIDI (osobne track'i/programy w osobnych zak\u0142adkach), - mo\u017cliwo\u015b\u0107 odtworzenia wgranego pliku MIDI, - mo\u017cliwo\u015b\u0107 zaznaczania i pod\u015bwietlania token\u00f3w oraz odpowiadaj\u0105cych im d\u017awi\u0119k\u00f3w na piano roll'u - wy\u015bwietlanie szczeg\u00f3\u0142owych informacji o tokenie w osobnej, powi\u0119kszonej ramce Potencjalna funkcjonalno\u015b\u0107 do dodania w przysz\u0142ych wersjach: - poprawa wydajno\u015bci dzia\u0142ania aplikacji przy wgrywanych bardzo du\u017cych plikach MIDI, - dodanie implementacji reszty tokenizer\u00f3w (MMM, MuMIDI, REMIPlus), - poprawa og\u00f3lnej oprawy graficznej aplikacji, - dodanie \u015bledzenia obecnie odtwarzanej pozycji na piano roll'u","title":"WIMU-MidiTokVisualizer"},{"location":"%20Design%20documentation/24L/notes_pl/#proces-developerski","text":"W celu zachowania zasad clean code, przed wrzuceniem commita na brancha, zaleca si\u0119 wykonanie pre-commita. Aby uruchomi\u0107 pre-commit, nale\u017cy u\u017cy\u0107 komendy: cd backend pre-commit run --all-files W sk\u0142ad skryptu pre-commit wchodz\u0105: black (formatowanie) ruff (linting) isort (sortowanie import\u00f3w) mypy (weryfikacja typowania)","title":"Proces developerski"},{"location":"%20Design%20documentation/24L/notes_pl/#budowanie-i-uruchamianie-aplikacji","text":"","title":"Budowanie i uruchamianie aplikacji"},{"location":"%20Design%20documentation/24L/notes_pl/#aplikacja-frontendowa","text":"Podstawowe uruchamianie aplikacji: cd frontend npm install npm run dev Uruchamianie aplikacji przy pomocy Dockera: cd frontend docker build . -t frontend docker run frontend -p 3000:3000","title":"Aplikacja frontendowa"},{"location":"%20Design%20documentation/24L/notes_pl/#aplikacja-backendowa","text":"Podstawowe uruchamianie aplikacji: cd backend poetry shell poetry install python -m core.main lub poetry run python -m core.main Uruchamianie aplikacji przy pomocy Dockera: cd backend DOCKER_BUILDKIT=1 docker build --target=runtime . -t backend docker run backend -p 8000:8000","title":"Aplikacja backendowa"},{"location":"%20Design%20documentation/24L/notes_pl/#docker-compose","text":"Mo\u017cliwe jest r\u00f3wnie\u017c uruchomienie ca\u0142ego projektu przy u\u017cyciu Docker Compose: docker-compose up --build","title":"Docker Compose"},{"location":"%20Design%20documentation/24L/notes_pl/#testowanie-aplikacji","text":"","title":"Testowanie aplikacji"},{"location":"%20Design%20documentation/24L/notes_pl/#aplikacja-frontendowa_1","text":"Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu jest : cd frontend npm install npm run test","title":"Aplikacja frontendowa"},{"location":"%20Design%20documentation/24L/notes_pl/#aplikacja-backendowa_1","text":"Testy jednostkowe uruchamiane s\u0105 przy u\u017cyciu pytest : poetry shell poetry install pytest lub: poetry run pytest","title":"Aplikacja backendowa"},{"location":"%20Design%20documentation/24L/notes_pl/#logi","text":"Zaimplementowano middleware na bazie starlette , kt\u00f3ry przy u\u017cyciu modu\u0142u logging tworzy logi dla ka\u017cdego zapytania do serwera. Pojedynczy wpis w logach zawiera podstawowe dane dla pojedynczego zapytania oraz odpowiedzi serwera, jak r\u00f3wnie\u017c czas przetwarzania zapytania. Domy\u015blnie logi zapisywane s\u0105 do pliku logfile.log .","title":"Logi"},{"location":"%20Design%20documentation/24L/notes_pl/#deployment","text":"Obie aplikacje s\u0105 hostowane na Heroku. Aplikacja frontendowa jest dost\u0119pna pod adresem: https://wimu-frontend-ccb0bbc023d3.herokuapp.com","title":"Deployment"},{"location":"%20Design%20documentation/24L/notes_pl/#oryginalni-autorzy-2023z","text":"\u0141ukasz Pokorzy\u0144ski Olga Sapiechowska Micha\u0142 Wiszenko","title":"Oryginalni autorzy (2023Z)"},{"location":"%20Design%20documentation/24L/notes_pl/#autorzy-rozwijajacy-projekt-2024l","text":"Kacper Stefa\u0144ski Konstantin Panov Piotr Malesa","title":"Autorzy rozwijaj\u0105cy projekt (2024L)"},{"location":"%20Design%20documentation/24L/notes_pl/#planowany-harmonogram-prac-projektu","text":"Tydzie\u0144 1 (19.02 - 23.02): - Tydzie\u0144 2 (26.02 - 01.03): - Tydzie\u0144 3 (04.03 - 08.03): - Tydzie\u0144 4 (11.03 - 15.03) : - Tydzie\u0144 5 (18.03 - 22.03) : Dostarczenie poprawionego design proposal'a ze zmodyfikowanym planem rozszerzenia aplikacji Tydzie\u0144 6 (25.03 - 29.03) : Przygotowanie \u015brodowiska do pracy nad projektem oraz rozpocz\u0119cie rozwoju nowych funkcjonalno\u015bci Tydzie\u0144 7 (01.04 - 05.04) : Przerwa \u015bwi\u0105teczna Tydzie\u0144 8 (08.04 - 12.04) : Dalsze prace nad UI oraz prezentacja prototypu Tydzie\u0144 9 (15.04 - 19.04) : Dalsze prace nad UI Tydzie\u0144 10 (22.04 -26.04) : Uko\u0144czona cz\u0119\u015b\u0107 rozszerzenia UI Tydzie\u0144 11 (29.04 - 03.05) : Maj\u00f3wka Tydzie\u0144 12 (06.05 - 10.05) : Praca nad implementacj\u0105 kolejnych tokenizer\u00f3w (MMM, MuMIDI) i ewentualne poprawki UI Tydzie\u0144 13 (13.05 - 17.05) : Dostarczenie i zademonstrowanie funkcjonalnego prototypu Tydzie\u0144 14 (20.05 - 24.05) : Uko\u0144czenie rozszerzenia API o nowe tokenizery Tydzie\u0144 15 (27.05 - 31.05) : Praca nad poprawkami po pierwszej prezentacji projektu Tydzie\u0144 16 (03.06 - 07.06) : Oddanie projektu (szacowany termin) Tydzie\u0144 17 (10.06 - 14.06): -","title":"Planowany harmonogram prac projektu"},{"location":"%20Design%20documentation/24Z/24Z_update/","text":"Added functionalities: Miditok library upgrade: from 2.1.7 to 3.0.4 Added PerTok tokenizator New logics of corresponding notes with tokens (forced by library upgrade) New parameters in configuration (mostly for PetTok): use_programs, use_microtiming, ticks_per_quarter, max_microtiming_shift, num_microtiming_bins Default tokenizator classes, now associating notes to tokens is run after we receive tokens, unifed functions for all tokenizers depending on \"use_programs\" parameter usage frontend: New design in general Subtle animations New piano roll- high resoultion, stable keybord so it does not vanish with scrolling Tokens can be paginated and scaled New audio player Deployment You can see an example deployment on Railway here As long as we're above our trial limit on Railway Running locally: You can use same commands as before to run the project locally. Frontend Basic run: cd frontend npm install npm run dev Using Docker: cd frontend docker build . -t frontend docker run frontend -p 3000:3000 Backend Basic run: cd backend poetry shell poetry install python -m core.main or poetry run python -m core.main Using Docker: cd backend DOCKER_BUILDKIT=1 docker build --target=runtime . -t backend docker run backend -p 8000:8000 All at once: docker-compose up Contributors Karol Bogumi\u0142 Maksymilian Banach Jakub Przesmycki","title":"24Z update"},{"location":"%20Design%20documentation/24Z/24Z_update/#added-functionalities","text":"Miditok library upgrade: from 2.1.7 to 3.0.4 Added PerTok tokenizator New logics of corresponding notes with tokens (forced by library upgrade) New parameters in configuration (mostly for PetTok): use_programs, use_microtiming, ticks_per_quarter, max_microtiming_shift, num_microtiming_bins Default tokenizator classes, now associating notes to tokens is run after we receive tokens, unifed functions for all tokenizers depending on \"use_programs\" parameter usage","title":"Added functionalities:"},{"location":"%20Design%20documentation/24Z/24Z_update/#frontend","text":"New design in general Subtle animations New piano roll- high resoultion, stable keybord so it does not vanish with scrolling Tokens can be paginated and scaled New audio player","title":"frontend:"},{"location":"%20Design%20documentation/24Z/24Z_update/#deployment","text":"You can see an example deployment on Railway here As long as we're above our trial limit on Railway","title":"Deployment"},{"location":"%20Design%20documentation/24Z/24Z_update/#running-locally","text":"You can use same commands as before to run the project locally.","title":"Running locally:"},{"location":"%20Design%20documentation/24Z/24Z_update/#frontend_1","text":"Basic run: cd frontend npm install npm run dev Using Docker: cd frontend docker build . -t frontend docker run frontend -p 3000:3000","title":"Frontend"},{"location":"%20Design%20documentation/24Z/24Z_update/#backend","text":"Basic run: cd backend poetry shell poetry install python -m core.main or poetry run python -m core.main Using Docker: cd backend DOCKER_BUILDKIT=1 docker build --target=runtime . -t backend docker run backend -p 8000:8000","title":"Backend"},{"location":"%20Design%20documentation/24Z/24Z_update/#all-at-once","text":"docker-compose up","title":"All at once:"},{"location":"%20Design%20documentation/24Z/24Z_update/#contributors","text":"Karol Bogumi\u0142 Maksymilian Banach Jakub Przesmycki","title":"Contributors"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/","text":"WIMU Projekt 2024L - Design Proposal Autorzy Temat projektu Harmonogram projektu Planowana funkcjonalno\u015b\u0107 programu Planowany stack technologiczny Bibliografia WIMU Projekt 2024L - Design Proposal Autorzy Piotr Malesa - 01112501@pw.edu.pl Kacper Stefa\u0144ski - kacper.stefanski.stud@pw.edu.pl Konstantin Panov - konstantin.panov.stud@pw.edu.pl Temat projektu Tematem projektu jest kontynuacja projektu MIDITok Visualizer z poprzedniej edycji przedmiotu. Na chwil\u0119 obecn\u0105 narz\u0119dzie to sk\u0142ada si\u0119 z aplikacji web'owej, kt\u00f3ra pozwala na przegl\u0105d token\u00f3w wygenerowanych przez bibliotek\u0119 MidiTok na podstawie wgranego przez u\u017cytkownika pliku w formacie MIDI oraz wizualizacj\u0119 metryk (np. tonacja, metrum, tempo), kt\u00f3re s\u0105 wyczytywane w celu dok\u0142adnej analizy zapisanych danych w formacie MIDI. Harmonogram projektu Tydzie\u0144 1 (19.02 - 23.02): - Tydzie\u0144 2 (26.02 - 01.03): - Tydzie\u0144 3 (04.03 - 08.03): - Tydzie\u0144 4 (11.03 - 15.03) : - Tydzie\u0144 5 (18.03 - 22.03) : Dostarczenie poprawionego design proposal'a ze zmodyfikowanym planem rozszerzenia aplikacji Tydzie\u0144 6 (25.03 - 29.03) : Przygotowanie \u015brodowiska do pracy nad projektem oraz rozpocz\u0119cie rozwoju nowych funkcjonalno\u015bci Tydzie\u0144 7 (01.04 - 05.04) : Przerwa \u015bwi\u0105teczna Tydzie\u0144 8 (08.04 - 12.04) : Dalsze prace nad UI oraz prezentacja prototypu Tydzie\u0144 9 (15.04 - 19.04) : Dalsze prace nad UI Tydzie\u0144 10 (22.04 -26.04) : Uko\u0144czona cz\u0119\u015b\u0107 rozszerzenia UI Tydzie\u0144 11 (29.04 - 03.05) : Maj\u00f3wka Tydzie\u0144 12 (06.05 - 10.05) : Praca nad implementacj\u0105 kolejnych tokenizer\u00f3w (MMM, MuMIDI) i ewentualne poprawki UI Tydzie\u0144 13 (13.05 - 17.05) : Dostarczenie i zademonstrowanie funkcjonalnego prototypu Tydzie\u0144 14 (20.05 - 24.05) : Uko\u0144czenie rozszerzenia API o nowe tokenizery Tydzie\u0144 15 (27.05 - 31.05) : Praca nad poprawkami po pierwszej prezentacji projektu Tydzie\u0144 16 (03.06 - 07.06) : Oddanie projektu (szacowany termin) Tydzie\u0144 17 (10.06 - 14.06): - Powy\u017cszy harmonogram dopuszcza mo\u017cliwo\u015b\u0107 modyfikacji dat kolejnych etap\u00f3w projektu, w zale\u017cno\u015bci od szybko\u015bci post\u0119pu prac nad projektem lub w wyniku zdarze\u0144 losowych w ci\u0105gu semestru. Jest to jedynie pogl\u0105dowy plan, gdy\u017c na chwil\u0119 obecn\u0105 ci\u0119\u017cko dok\u0142adnie sprecyzowa\u0107 ile czasu zajm\u0105 nam poszczeg\u00f3lne etapy. Planowana funkcjonalno\u015b\u0107 programu Planowanym przez nas rozszerzeniem aplikacji MIDITok Visualizer jest modyfikacja zar\u00f3wno istniej\u0105cej cz\u0119\u015bci backendowej jak i frontendowej. Cz\u0119\u015b\u0107 API zosta\u0142a by poszerzona o kolejne tokenizery (MMM, MuMIDI) a cz\u0119\u015b\u0107 frontendu o ulepszony widok token\u00f3w. Obecnie istniej\u0105cy widok token\u00f3w (tokeny oddzielnych \u015bcie\u017cej w oddzielnych wierszach) pozostanie bez zmian, natomiast zostanie dodany nowy i czytelniejszy widok token\u00f3w, gdzie tokeny oddzielnych \u015bcie\u017cek by\u0142yby wy\u015bwietlane w oddzielnych zak\u0142adkach oraz by\u0142yby pomniejszone i wy\u015bwietlane wierszami. Dodatkowo obok token\u00f3w ka\u017cdej \u015bcie\u017cki wgranego pliku MIDI wy\u015bwietlony zosta\u0142by piano roll. Po najechaniu na konkretny d\u017awi\u0119k w piano roll'u danej \u015bcie\u017ci zostan\u0105 pod\u015bwietlone tokeny, kt\u00f3re mu odpowiadaj\u0105 (i na odwr\u00f3t - po najechaniu na dany token pod\u015bwietli si\u0119 powi\u0105zany z nim d\u017awi\u0119k na piano roll'u). Okno do konfiguracji tokenizer\u00f3w r\u00f3wnie\u017c zostanie ulepszone. Planowany stack technologiczny Przewidywany stack technologiczny jest oczywi\u015bcie poniek\u0105d uzale\u017cniony od obecnej wersji projektu, kt\u00f3ry zamierzamy rozszerzy\u0107. Zamierzamy zatem wykorzysta\u0107 podobne narz\u0119dzia co pierwotni autorzy projektu. Frontend : TypeScript, React Backend : Python, FastAPI/Flask Tokenizacja plik\u00f3w : MidiTok Hosting aplikacji : Heroku System kontroli wersji : Git Hosting repozytorium : GitLab Testy : pytest Bibliografia MIDITok. (n.d.). MIDITok Documentation (Version 3.0.1) . ( https://miditok.readthedocs.io/en/v3.0.1/ ) W miar\u0119 post\u0119p\u00f3w prac nad projektem bibliografia b\u0119dzie mog\u0142a by\u0107 rozszerzona.","title":"GR5 design proposal"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#wimu-projekt-2024l-design-proposal","text":"","title":"WIMU Projekt 2024L - Design Proposal"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#autorzy","text":"Piotr Malesa - 01112501@pw.edu.pl Kacper Stefa\u0144ski - kacper.stefanski.stud@pw.edu.pl Konstantin Panov - konstantin.panov.stud@pw.edu.pl","title":"Autorzy"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#temat-projektu","text":"Tematem projektu jest kontynuacja projektu MIDITok Visualizer z poprzedniej edycji przedmiotu. Na chwil\u0119 obecn\u0105 narz\u0119dzie to sk\u0142ada si\u0119 z aplikacji web'owej, kt\u00f3ra pozwala na przegl\u0105d token\u00f3w wygenerowanych przez bibliotek\u0119 MidiTok na podstawie wgranego przez u\u017cytkownika pliku w formacie MIDI oraz wizualizacj\u0119 metryk (np. tonacja, metrum, tempo), kt\u00f3re s\u0105 wyczytywane w celu dok\u0142adnej analizy zapisanych danych w formacie MIDI.","title":"Temat projektu"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#harmonogram-projektu","text":"Tydzie\u0144 1 (19.02 - 23.02): - Tydzie\u0144 2 (26.02 - 01.03): - Tydzie\u0144 3 (04.03 - 08.03): - Tydzie\u0144 4 (11.03 - 15.03) : - Tydzie\u0144 5 (18.03 - 22.03) : Dostarczenie poprawionego design proposal'a ze zmodyfikowanym planem rozszerzenia aplikacji Tydzie\u0144 6 (25.03 - 29.03) : Przygotowanie \u015brodowiska do pracy nad projektem oraz rozpocz\u0119cie rozwoju nowych funkcjonalno\u015bci Tydzie\u0144 7 (01.04 - 05.04) : Przerwa \u015bwi\u0105teczna Tydzie\u0144 8 (08.04 - 12.04) : Dalsze prace nad UI oraz prezentacja prototypu Tydzie\u0144 9 (15.04 - 19.04) : Dalsze prace nad UI Tydzie\u0144 10 (22.04 -26.04) : Uko\u0144czona cz\u0119\u015b\u0107 rozszerzenia UI Tydzie\u0144 11 (29.04 - 03.05) : Maj\u00f3wka Tydzie\u0144 12 (06.05 - 10.05) : Praca nad implementacj\u0105 kolejnych tokenizer\u00f3w (MMM, MuMIDI) i ewentualne poprawki UI Tydzie\u0144 13 (13.05 - 17.05) : Dostarczenie i zademonstrowanie funkcjonalnego prototypu Tydzie\u0144 14 (20.05 - 24.05) : Uko\u0144czenie rozszerzenia API o nowe tokenizery Tydzie\u0144 15 (27.05 - 31.05) : Praca nad poprawkami po pierwszej prezentacji projektu Tydzie\u0144 16 (03.06 - 07.06) : Oddanie projektu (szacowany termin) Tydzie\u0144 17 (10.06 - 14.06): - Powy\u017cszy harmonogram dopuszcza mo\u017cliwo\u015b\u0107 modyfikacji dat kolejnych etap\u00f3w projektu, w zale\u017cno\u015bci od szybko\u015bci post\u0119pu prac nad projektem lub w wyniku zdarze\u0144 losowych w ci\u0105gu semestru. Jest to jedynie pogl\u0105dowy plan, gdy\u017c na chwil\u0119 obecn\u0105 ci\u0119\u017cko dok\u0142adnie sprecyzowa\u0107 ile czasu zajm\u0105 nam poszczeg\u00f3lne etapy.","title":"Harmonogram projektu"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#planowana-funkcjonalnosc-programu","text":"Planowanym przez nas rozszerzeniem aplikacji MIDITok Visualizer jest modyfikacja zar\u00f3wno istniej\u0105cej cz\u0119\u015bci backendowej jak i frontendowej. Cz\u0119\u015b\u0107 API zosta\u0142a by poszerzona o kolejne tokenizery (MMM, MuMIDI) a cz\u0119\u015b\u0107 frontendu o ulepszony widok token\u00f3w. Obecnie istniej\u0105cy widok token\u00f3w (tokeny oddzielnych \u015bcie\u017cej w oddzielnych wierszach) pozostanie bez zmian, natomiast zostanie dodany nowy i czytelniejszy widok token\u00f3w, gdzie tokeny oddzielnych \u015bcie\u017cek by\u0142yby wy\u015bwietlane w oddzielnych zak\u0142adkach oraz by\u0142yby pomniejszone i wy\u015bwietlane wierszami. Dodatkowo obok token\u00f3w ka\u017cdej \u015bcie\u017cki wgranego pliku MIDI wy\u015bwietlony zosta\u0142by piano roll. Po najechaniu na konkretny d\u017awi\u0119k w piano roll'u danej \u015bcie\u017ci zostan\u0105 pod\u015bwietlone tokeny, kt\u00f3re mu odpowiadaj\u0105 (i na odwr\u00f3t - po najechaniu na dany token pod\u015bwietli si\u0119 powi\u0105zany z nim d\u017awi\u0119k na piano roll'u). Okno do konfiguracji tokenizer\u00f3w r\u00f3wnie\u017c zostanie ulepszone.","title":"Planowana funkcjonalno\u015b\u0107 programu"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#planowany-stack-technologiczny","text":"Przewidywany stack technologiczny jest oczywi\u015bcie poniek\u0105d uzale\u017cniony od obecnej wersji projektu, kt\u00f3ry zamierzamy rozszerzy\u0107. Zamierzamy zatem wykorzysta\u0107 podobne narz\u0119dzia co pierwotni autorzy projektu. Frontend : TypeScript, React Backend : Python, FastAPI/Flask Tokenizacja plik\u00f3w : MidiTok Hosting aplikacji : Heroku System kontroli wersji : Git Hosting repozytorium : GitLab Testy : pytest","title":"Planowany stack technologiczny"},{"location":"%20Design%20documentation/24Z/GR5_design_proposal/#bibliografia","text":"MIDITok. (n.d.). MIDITok Documentation (Version 3.0.1) . ( https://miditok.readthedocs.io/en/v3.0.1/ ) W miar\u0119 post\u0119p\u00f3w prac nad projektem bibliografia b\u0119dzie mog\u0142a by\u0107 rozszerzona.","title":"Bibliografia"},{"location":"%20Design%20documentation/25L/Design_proposal_25L/","text":"WIMU 25L Design Proposal Funkcje oraz komentarze opisuj\u0105cy aktualny stan Poprawa b\u0142\u0119d\u00f3w kodu i obs\u0142uga wyj\u0105tk\u00f3w - podczas wst\u0119pnych test\u00f3w napotkano na problemy zwi\u0105zane z tokenizacj\u0105 plik\u00f3w MIDI. Dla example_files wszystko dzia\u0142a, ale losowy plik z internetu spowodowa\u0142 problem z jego rozpakowaniem. Dlatego chcemy wprowadzi\u0107 obs\u0142ug\u0119 b\u0142\u0119d\u00f3w (pierwsze co si\u0119 rzuca w oczy: odczyt i zapis pliku), jak r\u00f3wnie\u017c tych wymagajacych restrukturyzacj\u0119 funkcji. Restrukturyzacja backendu - wprowadzanie zasad dobrego programowania obiektowego w tym zasady SOLID z powodu co raz to bardziej rozbudowanych funkcji. Dodanie do frontedu dynamicznego odtwarzania d\u017awi\u0119ku wraz z piano rollem. Dodanie dokumentacji - wed\u0142ug grupy majacej ostatnio ten projekt, kod jest bardzo nieuporz\u0105dkowany oraz brakuje w nim komentarzy, dlatego te\u017c chcieliby\u015bmy popracowa\u0107 nad dokumentacj\u0105, kt\u00f3ra pozwala\u0142aby lepiej rozwija\u0107 projekt. Dodanie CICD - \u015brodowisko na bazie GitHub Actions umo\u017cliwiaj\u0105cych automatyzacj\u0119 i usprawnienie proces\u00f3w rozwoju, testowania oraz wdra\u017cania aplikacji, a tak\u017ce integracj\u0119 z generowaniem dokumentacji MkDocs. Edycja MIDI na stronie i jego zapis - dodanie zak\u0142adki umo\u017cliwiaj\u0105cej edycj\u0119 pliku MIDI z ewentualn\u0105 obs\u0142ug\u0105 przez bibliotek\u0119 Mido urz\u0105dze\u0144 wysy\u0142aj\u0105cych komunikaty MIDI. Uporz\u0105dkowanie konfiguracji tokenizer\u00f3w poprzez pliki JSON z ewentualn\u0105 automatyzacj\u0105 po stronie odczytu informacji po prostu z pliku MIDI. Harmonogram projektu Tydzie\u0144 1 (17.03 - 23.03): Wprowadzenie do projektu: Przygotowanie \u015brodowiska do pracy nad projektem, zapoznanie si\u0119 z narz\u0119dziami, poprawki design proposal Tydzie\u0144 2 (24.03 - 30.03): Aktualizacja wersji projektu: Merge nowego interfejsu graficznego z poprzedniej iteracji do g\u0142\u00f3wnej wersji projektu oraz dog\u0142ebne zapoznanie si\u0119 ze zmianami. Tydzie\u0144 3 (31.03 - 06.04): Wdro\u017cenie CICD: Przygotowanie repo pod przysz\u0142a dokumentacj\u0119, przygotowanie CICD wraz z automatycznymi buildem, testami oraz deployem na railway / heroku / (ewentualnie zostanie wykorzystany serwer galera, jednak wymaga to przeniesienia repo na gitlaba) Tydzie\u0144 4 (07.04 - 13.04): Podj\u0119cie dzia\u0142a\u0144 ze zmianami w backendzie: Poprawienie pliku midi_processing, a dok\u0142adniej funkcji stworzonych w nowej wersji programu, usuni\u0119cie niepotrzebnych komponent\u00f3w ( np. Tokenizer_factory), jak r\u00f3wnie\u017c struktury tokenizer\u00f3w(g\u0142\u00f3wnie struktur plik\u00f3w service). Tydzie\u0144 5 (14.04 - 20.04): Dalsze dzia\u0142ania z backendem Poprawa powsta\u0142ych b\u0142\u0119d\u00f3w znalezionych podczas test\u00f3w aplikacji. Pierwsze opisy funkcji do dokumentacji Tydzie\u0144 6 (21.04 - 27.04):Rozpocz\u0119ci pracy z Frontendem Poprawa zmian aktualnych tokenizer\u00f3w( po wybraniu jednego tokenizera, trzeba od\u015bwie\u017cy\u0107 stron\u0119 \u017ceby wybrac inny), dodanie funkcji zmiany instrumentu przy play(*), wst\u0119pne prace nad piano rollem. Tydzie\u0144 7 (28.04 - 04.05): Maj\u00f3wka Tydzie\u0144 8 (05.05 - 11.05):Dalsze prace nad Frontedem : Dynamiczny piano roll wraz z pod\u015bwietlaniem si\u0119 aktualnie odtwarzanej informacji o d\u017awi\u0119ku Tydzie\u0144 9 (12.05 - 18.05): Nowa funkcja Prac\u0119 nad podstron\u0105 do tworzenia w\u0142asnego midi: Stworzenie nad backedznie odpowiednich funkcji wykorzystuj\u0105c bibliotek\u0119 MIDO do tworzenia midi, przygotowanie funkcji do API. Tydzie\u0144 10 (19.05 - 25.05): Nowa funkcja cz.2 Stworzenie na frontedzie obiekt\u00f3w wysy\u0142ajacych informacje do backendu o wywo\u0142anie nowo stworzonych funkcji. Dodanie operacji odtwarzania danej sekwencji przez klawiatur\u0119 ( Virtual MIDI) Tydzie\u0144 11 (26.05 - 1.06): Oddanie projektu, poprawa ewentualnych b\u0142\u0119d\u00f3w W ka\u017cdym z tych etap\u00f3w, na bie\u017c\u0105co b\u0119dzie aktualizowana dokumentacja projektu. Podkre\u015bla si\u0119 jednak, \u017ce harmonogram mo\u017ce ulec zmianie, ze wzgl\u0119du na wyst\u0105pienie ewentualnych problem\u00f3w. Planowany stack technologiczny Stack jez zale\u017cny od mo\u017cliwo\u015bci integracji aktualnej wersji projektu z nowymi narz\u0119dziami: Repozytorium: GitHub Testy: pytest, pytest-mock, pytest-benchamrk Backend: Python, FastAPI Frontend: React Dokumentacja: MkDocs material + plugin mkdocstrings CICD: GitHub Actions Bibliografia MidiTok documentation ( https://miditok.readthedocs.io/en/stable/ ) GitHub Actions documentation ( https://docs.github.com/en/actions ) MkDocs documentation ( https://www.mkdocs.org/ )","title":"WIMU 25L Design Proposal"},{"location":"%20Design%20documentation/25L/Design_proposal_25L/#wimu-25l-design-proposal","text":"","title":"WIMU 25L Design Proposal"},{"location":"%20Design%20documentation/25L/Design_proposal_25L/#funkcje-oraz-komentarze-opisujacy-aktualny-stan","text":"Poprawa b\u0142\u0119d\u00f3w kodu i obs\u0142uga wyj\u0105tk\u00f3w - podczas wst\u0119pnych test\u00f3w napotkano na problemy zwi\u0105zane z tokenizacj\u0105 plik\u00f3w MIDI. Dla example_files wszystko dzia\u0142a, ale losowy plik z internetu spowodowa\u0142 problem z jego rozpakowaniem. Dlatego chcemy wprowadzi\u0107 obs\u0142ug\u0119 b\u0142\u0119d\u00f3w (pierwsze co si\u0119 rzuca w oczy: odczyt i zapis pliku), jak r\u00f3wnie\u017c tych wymagajacych restrukturyzacj\u0119 funkcji. Restrukturyzacja backendu - wprowadzanie zasad dobrego programowania obiektowego w tym zasady SOLID z powodu co raz to bardziej rozbudowanych funkcji. Dodanie do frontedu dynamicznego odtwarzania d\u017awi\u0119ku wraz z piano rollem. Dodanie dokumentacji - wed\u0142ug grupy majacej ostatnio ten projekt, kod jest bardzo nieuporz\u0105dkowany oraz brakuje w nim komentarzy, dlatego te\u017c chcieliby\u015bmy popracowa\u0107 nad dokumentacj\u0105, kt\u00f3ra pozwala\u0142aby lepiej rozwija\u0107 projekt. Dodanie CICD - \u015brodowisko na bazie GitHub Actions umo\u017cliwiaj\u0105cych automatyzacj\u0119 i usprawnienie proces\u00f3w rozwoju, testowania oraz wdra\u017cania aplikacji, a tak\u017ce integracj\u0119 z generowaniem dokumentacji MkDocs. Edycja MIDI na stronie i jego zapis - dodanie zak\u0142adki umo\u017cliwiaj\u0105cej edycj\u0119 pliku MIDI z ewentualn\u0105 obs\u0142ug\u0105 przez bibliotek\u0119 Mido urz\u0105dze\u0144 wysy\u0142aj\u0105cych komunikaty MIDI. Uporz\u0105dkowanie konfiguracji tokenizer\u00f3w poprzez pliki JSON z ewentualn\u0105 automatyzacj\u0105 po stronie odczytu informacji po prostu z pliku MIDI.","title":"Funkcje oraz komentarze opisuj\u0105cy aktualny stan"},{"location":"%20Design%20documentation/25L/Design_proposal_25L/#harmonogram-projektu","text":"Tydzie\u0144 1 (17.03 - 23.03): Wprowadzenie do projektu: Przygotowanie \u015brodowiska do pracy nad projektem, zapoznanie si\u0119 z narz\u0119dziami, poprawki design proposal Tydzie\u0144 2 (24.03 - 30.03): Aktualizacja wersji projektu: Merge nowego interfejsu graficznego z poprzedniej iteracji do g\u0142\u00f3wnej wersji projektu oraz dog\u0142ebne zapoznanie si\u0119 ze zmianami. Tydzie\u0144 3 (31.03 - 06.04): Wdro\u017cenie CICD: Przygotowanie repo pod przysz\u0142a dokumentacj\u0119, przygotowanie CICD wraz z automatycznymi buildem, testami oraz deployem na railway / heroku / (ewentualnie zostanie wykorzystany serwer galera, jednak wymaga to przeniesienia repo na gitlaba) Tydzie\u0144 4 (07.04 - 13.04): Podj\u0119cie dzia\u0142a\u0144 ze zmianami w backendzie: Poprawienie pliku midi_processing, a dok\u0142adniej funkcji stworzonych w nowej wersji programu, usuni\u0119cie niepotrzebnych komponent\u00f3w ( np. Tokenizer_factory), jak r\u00f3wnie\u017c struktury tokenizer\u00f3w(g\u0142\u00f3wnie struktur plik\u00f3w service). Tydzie\u0144 5 (14.04 - 20.04): Dalsze dzia\u0142ania z backendem Poprawa powsta\u0142ych b\u0142\u0119d\u00f3w znalezionych podczas test\u00f3w aplikacji. Pierwsze opisy funkcji do dokumentacji Tydzie\u0144 6 (21.04 - 27.04):Rozpocz\u0119ci pracy z Frontendem Poprawa zmian aktualnych tokenizer\u00f3w( po wybraniu jednego tokenizera, trzeba od\u015bwie\u017cy\u0107 stron\u0119 \u017ceby wybrac inny), dodanie funkcji zmiany instrumentu przy play(*), wst\u0119pne prace nad piano rollem. Tydzie\u0144 7 (28.04 - 04.05): Maj\u00f3wka Tydzie\u0144 8 (05.05 - 11.05):Dalsze prace nad Frontedem : Dynamiczny piano roll wraz z pod\u015bwietlaniem si\u0119 aktualnie odtwarzanej informacji o d\u017awi\u0119ku Tydzie\u0144 9 (12.05 - 18.05): Nowa funkcja Prac\u0119 nad podstron\u0105 do tworzenia w\u0142asnego midi: Stworzenie nad backedznie odpowiednich funkcji wykorzystuj\u0105c bibliotek\u0119 MIDO do tworzenia midi, przygotowanie funkcji do API. Tydzie\u0144 10 (19.05 - 25.05): Nowa funkcja cz.2 Stworzenie na frontedzie obiekt\u00f3w wysy\u0142ajacych informacje do backendu o wywo\u0142anie nowo stworzonych funkcji. Dodanie operacji odtwarzania danej sekwencji przez klawiatur\u0119 ( Virtual MIDI) Tydzie\u0144 11 (26.05 - 1.06): Oddanie projektu, poprawa ewentualnych b\u0142\u0119d\u00f3w W ka\u017cdym z tych etap\u00f3w, na bie\u017c\u0105co b\u0119dzie aktualizowana dokumentacja projektu. Podkre\u015bla si\u0119 jednak, \u017ce harmonogram mo\u017ce ulec zmianie, ze wzgl\u0119du na wyst\u0105pienie ewentualnych problem\u00f3w.","title":"Harmonogram projektu"},{"location":"%20Design%20documentation/25L/Design_proposal_25L/#planowany-stack-technologiczny","text":"Stack jez zale\u017cny od mo\u017cliwo\u015bci integracji aktualnej wersji projektu z nowymi narz\u0119dziami: Repozytorium: GitHub Testy: pytest, pytest-mock, pytest-benchamrk Backend: Python, FastAPI Frontend: React Dokumentacja: MkDocs material + plugin mkdocstrings CICD: GitHub Actions","title":"Planowany stack technologiczny"},{"location":"%20Design%20documentation/25L/Design_proposal_25L/#bibliografia","text":"MidiTok documentation ( https://miditok.readthedocs.io/en/stable/ ) GitHub Actions documentation ( https://docs.github.com/en/actions ) MkDocs documentation ( https://www.mkdocs.org/ )","title":"Bibliografia"},{"location":"%20Design%20documentation/25L/Weekly_Update/","text":"Weekly Update Tydzie\u0144 1 (17.03 - 23.03): Wprowadzenie do projektu W tym tygodniu przygotowano \u015brodowisko do pracy nad projektem u wszystkich cz\u0142onk\u00f3w zespo\u0142u, wniesiono poprawki do design proposal, kt\u00f3re wymagaj\u0105 jeszcze akceptacji. Skontaktowano si\u0119 z tw\u00f3rc\u0105, jak r\u00f3wnie\u017c poprzednikami projektu w celach dalszych usprawnie\u0144. Zapoznano si\u0119 ze struktur\u0105 projektu, u\u017cytymi narz\u0119dziami, bibliotekami. Tydzie\u0144 2 (24.03 - 30.03): Aktualizacja wersji projektu Tydzie\u0144 ten po\u015bwi\u0119cono na om\u00f3wienie z tw\u00f3rc\u0105 projektu proponowanych zmian, jak r\u00f3wnie\u017c przekazano pierwsze uwagi dotycz\u0105ce dzia\u0142ania aplikacji. Dodatkowo grupa wzi\u0119\u0142a udzia\u0142 przy omawianiu najnowszej aktualizacji projektu z 24L. Tydzie\u0144 3 (31.03 - 06.04): Wdro\u017cenie CICD Dodano wst\u0119pna wersje CI zawieraj\u0105c\u0105 budowanie dokumentacji w MKDocs, planowana jest w trakcie rozbudowa dokumentacji o kolejne rozdzia\u0142y, jak r\u00f3wnie\u017c ustawienie automatycznej dokumentacji na podstawie kodu. Ca\u0142y czas trwa walka z odpowiednim ustawieniem deploy na heroku - wyst\u0119puje tutaj problemy z routing'iem, jednak \u017ceby nie traci\u0107 czasu zostanie to prze\u0142o\u017cone na inne tygodnie. W kolejnym tygodniu zostanie rozbudowane automatyczne testowanie. W tym miejscu plan zostaje op\u00f3\u017aniony min o tydzie\u0144. Tydzie\u0144 4 (07.04 - 13.04): Podj\u0119cie dzia\u0142a\u0144 ze zmianami w backendzie Tydzie\u0144 5 (14.04 - 20.04): Dalsze dzia\u0142ania z backendem","title":"Weekly Update"},{"location":"%20Design%20documentation/25L/Weekly_Update/#weekly-update","text":"","title":"Weekly Update"},{"location":"%20Design%20documentation/25L/Weekly_Update/#tydzien-1-1703-2303-wprowadzenie-do-projektu","text":"W tym tygodniu przygotowano \u015brodowisko do pracy nad projektem u wszystkich cz\u0142onk\u00f3w zespo\u0142u, wniesiono poprawki do design proposal, kt\u00f3re wymagaj\u0105 jeszcze akceptacji. Skontaktowano si\u0119 z tw\u00f3rc\u0105, jak r\u00f3wnie\u017c poprzednikami projektu w celach dalszych usprawnie\u0144. Zapoznano si\u0119 ze struktur\u0105 projektu, u\u017cytymi narz\u0119dziami, bibliotekami.","title":"Tydzie\u0144 1 (17.03 - 23.03): Wprowadzenie do projektu"},{"location":"%20Design%20documentation/25L/Weekly_Update/#tydzien-2-2403-3003-aktualizacja-wersji-projektu","text":"Tydzie\u0144 ten po\u015bwi\u0119cono na om\u00f3wienie z tw\u00f3rc\u0105 projektu proponowanych zmian, jak r\u00f3wnie\u017c przekazano pierwsze uwagi dotycz\u0105ce dzia\u0142ania aplikacji. Dodatkowo grupa wzi\u0119\u0142a udzia\u0142 przy omawianiu najnowszej aktualizacji projektu z 24L.","title":"Tydzie\u0144 2 (24.03 - 30.03): Aktualizacja wersji projektu"},{"location":"%20Design%20documentation/25L/Weekly_Update/#tydzien-3-3103-0604-wdrozenie-cicd","text":"Dodano wst\u0119pna wersje CI zawieraj\u0105c\u0105 budowanie dokumentacji w MKDocs, planowana jest w trakcie rozbudowa dokumentacji o kolejne rozdzia\u0142y, jak r\u00f3wnie\u017c ustawienie automatycznej dokumentacji na podstawie kodu. Ca\u0142y czas trwa walka z odpowiednim ustawieniem deploy na heroku - wyst\u0119puje tutaj problemy z routing'iem, jednak \u017ceby nie traci\u0107 czasu zostanie to prze\u0142o\u017cone na inne tygodnie. W kolejnym tygodniu zostanie rozbudowane automatyczne testowanie. W tym miejscu plan zostaje op\u00f3\u017aniony min o tydzie\u0144.","title":"Tydzie\u0144 3 (31.03 - 06.04): Wdro\u017cenie CICD"},{"location":"%20Design%20documentation/25L/Weekly_Update/#tydzien-4-0704-1304-podjecie-dziaan-ze-zmianami-w-backendzie","text":"","title":"Tydzie\u0144 4 (07.04 - 13.04): Podj\u0119cie dzia\u0142a\u0144 ze zmianami w backendzie"},{"location":"%20Design%20documentation/25L/Weekly_Update/#tydzien-5-1404-2004-dalsze-dziaania-z-backendem","text":"","title":"Tydzie\u0144 5 (14.04 - 20.04): Dalsze dzia\u0142ania z backendem"},{"location":"%20Development%20documentation/What/","text":"Tu powstanie dokumentacja dotycz\u0105ca kodu (automatyczna), uruchomienia itd","title":"What"},{"location":"Technical%20documentation/What/","text":"Dokumentacja dotycz\u0105ca architektury systemu, deployment, CI/CD, docker itd","title":"What"}]}